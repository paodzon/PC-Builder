{"ast":null,"code":"var _jsxFileName = \"A:\\\\Projects\\\\PC-Builder\\\\src\\\\components\\\\Items\\\\TableP.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'; // A great library for fuzzy filtering/sorting items\n\nimport matchSorter from 'match-sorter';\nimport { Media, Table, Row, Card, Button, Col, CardHeader } from \"reactstrap\";\nimport makeData from './makedata';\nconst Styles = styled.div`\n\n\n  table {\n\n  }\n`; // Define a default UI for filtering\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"Search:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    value: value || \"\",\n    onChange: e => {\n      setValue(e.target.value);\n      onChange(e.target.value);\n    },\n    placeholder: `${count} records...`,\n    style: {\n      fontSize: '1.1rem',\n      border: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n} // Define a default UI for filtering\n\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/React.createElement(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/React.createElement(\"select\", {\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"All\"), options.map((option, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, option)));\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\nfunction SliderColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: min,\n    max: max,\n    value: filterValue || min,\n    onChange: e => {\n      setFilter(parseInt(e.target.value, 10));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setFilter(undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Off\"));\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\nfunction NumberRangeColumnFilter({\n  column: {\n    filterValue = [],\n    preFilteredRows,\n    setFilter,\n    id\n  }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: filterValue[0] || '',\n    type: \"number\",\n    onChange: e => {\n      const val = e.target.value;\n      setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n    },\n    placeholder: `Min (${min})`,\n    style: {\n      width: '70px',\n      marginRight: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }), \"to\", /*#__PURE__*/React.createElement(\"input\", {\n    value: filterValue[1] || '',\n    type: \"number\",\n    onChange: e => {\n      const val = e.target.value;\n      setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n    },\n    placeholder: `Max (${max})`,\n    style: {\n      width: '70px',\n      marginLeft: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Our table component\n\n\nfunction Tablex({\n  columns,\n  data\n}) {\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, Object.assign({}, getTableProps(), {\n    className: \"align-items-center table-flush\",\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"thead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }), firstPageRows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 11\n    }\n  }, JSON.stringify(state.filters, null, 2)))));\n} // Define a custom filter filter function!\n\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';\n\nfunction TableP() {\n  const columns = React.useMemo(() => [{\n    Header: 'Processor',\n    columns: [{\n      Header: 'Product',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName' // Use our custom `fuzzyText` filter on this column\n\n    }, {\n      Header: 'Price',\n      accessor: 'price',\n      Filter: SliderColumnFilter,\n      filter: 'equals'\n    }]\n  }], []);\n  const data = React.useMemo(() => makeData(1000), []);\n  const xdata = React.useMemo(() => [{\n    \"firstName\": \"x1\",\n    \"lastName\": \"yLanTest101\",\n    \"price\": \"123\"\n  }, {\n    \"firstName\": \"x2\",\n    \"lastName\": \"yLanTest102\",\n    \"price\": \"3434\"\n  }, {\n    \"firstName\": \"x3\",\n    \"lastName\": \"yTest1111\",\n    \"price\": \"55\"\n  }], []);\n  return /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tablex, {\n    columns: columns,\n    data: xdata,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TableP;","map":{"version":3,"sources":["A:/Projects/PC-Builder/src/components/Items/TableP.js"],"names":["React","styled","useTable","useFilters","useGlobalFilter","useAsyncDebounce","matchSorter","Media","Table","Row","Card","Button","Col","CardHeader","makeData","Styles","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","useState","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","keys","autoRemove","Tablex","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","textAlign","getRowProps","cells","cell","getCellProps","render","JSON","stringify","filters","filterGreaterThan","TableP","Header","accessor","xdata"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\r\n// A great library for fuzzy filtering/sorting items\r\nimport matchSorter from 'match-sorter'\r\nimport {\r\n    Media,\r\n    Table,\r\n    Row,\r\n    Card,\r\n    Button,\r\n    Col,\r\n    CardHeader,\r\n} from \"reactstrap\";\r\nimport makeData from './makedata'\r\n\r\nconst Styles = styled.div`\r\n\r\n\r\n  table {\r\n\r\n  }\r\n`\r\n\r\n// Define a default UI for filtering\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n}) {\r\n  const count = preGlobalFilteredRows.length\r\n  const [value, setValue] = React.useState(globalFilter)\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined)\r\n  }, 200)\r\n\r\n  return (\r\n    <span>\r\n      Search:{' '}\r\n      <input\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        style={{\r\n          fontSize: '1.1rem',\r\n          border: '0',\r\n        }}\r\n      />\r\n    </span>\r\n  )\r\n}\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Our table component\r\nfunction Tablex({ columns, data }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn, // Be sure to pass the defaultColumn option\r\n      filterTypes,\r\n    },\r\n    useFilters, // useFilters!\r\n    useGlobalFilter // useGlobalFilter!\r\n  )\r\n\r\n  // We don't want to render all of the rows for this example, so cap\r\n  // it for this use case\r\n  const firstPageRows = rows.slice(0, 10)\r\n\r\n  return (\r\n    <>\r\n     <Table {...getTableProps()} className=\"align-items-center table-flush\" responsive>\r\n     \r\n        <thead className=\"thead\">\r\n\r\n          <tr>\r\n            <th scope=\"col\"\r\n              colSpan={visibleColumns.length}\r\n              style={{\r\n                textAlign: 'right',\r\n              }}\r\n            >\r\n              <GlobalFilter\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                globalFilter={state.globalFilter}\r\n                setGlobalFilter={setGlobalFilter}\r\n              />\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n        </Table>\r\n      <br />\r\n      <div>Showing the first 20 results of {rows.length} rows</div>\r\n      <div>\r\n        <pre>\r\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\r\n        </pre>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter(row => {\r\n    const rowValue = row.values[id]\r\n    return rowValue >= filterValue\r\n  })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\nfunction TableP() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Processor',\r\n        columns: [\r\n          {\r\n            Header: 'Product',\r\n            accessor: 'firstName',\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n            // Use our custom `fuzzyText` filter on this column\r\n          },\r\n          {\r\n            Header: 'Price',\r\n            accessor: 'price',\r\n            Filter: SliderColumnFilter,\r\n            filter: 'equals',\r\n          },\r\n        ],\r\n      },\r\n\r\n    ],\r\n    []\r\n  )\r\n\r\n  const data = React.useMemo(() => makeData(1000), [])\r\n\r\n  const xdata = React.useMemo(() => [\r\n    {\r\n        \"firstName\":\"x1\",\r\n        \"lastName\":\"yLanTest101\",\r\n        \"price\":\"123\",\r\n    },\r\n     \r\n    {\r\n        \"firstName\":\"x2\",\r\n        \"lastName\":\"yLanTest102\",\r\n        \"price\":\"3434\",\r\n    },\r\n     \r\n    {\r\n        \"firstName\":\"x3\",\r\n        \"lastName\":\"yTest1111\",\r\n        \"price\":\"55\",\r\n    },\r\n], [])\r\n\r\n  return (\r\n    <Styles>\r\n      <Tablex columns={columns} data={xdata} />\r\n    </Styles>\r\n  )\r\n}\r\n\r\nexport default TableP\r\n"]},"metadata":{},"sourceType":"module"}